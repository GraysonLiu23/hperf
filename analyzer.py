import pandas as pd
import numpy as np
from connector import Connector
import os
import logging


class Analyzer:
    def __init__(self, connector: Connector, configs: dict) -> None:
        """
        Constructor of 'Analyzer'
        :param connector: an instance of 'Connector' ('LocalConnector' or 'RemoteConnector')
        :param configs: a dict of parsed configurations (the member 'configs' in 'Controller')
        """
        self.connector = connector
        self.configs = configs
        
        self.raw_data_path = self.connector.get_raw_data_path()

        # read the raw performance data file generated by 'Profiler' and convert to 'DataFrame'
        self.raw_data = pd.read_csv(self.raw_data_path,
                                    header=None,
                                    names=["timestamp", "unit",
                                           "value", "event"],
                                    usecols=[0, 1, 2, 4])

    def get_event_all_cpu_total(self, to_csv: bool = False) -> pd.DataFrame:
        """
        """
        event_per_cpu = self.raw_data.groupby(["unit", "event"]).agg(
            value_per_cpu=("value", np.sum)
        )
        event_all_cpu_total = event_per_cpu.groupby(["event"]).agg(
            value_all_cpu=("value_per_cpu", np.sum)
        )
        if to_csv:
            # TODO: save DataFrame to a CSV file
            logging.info("save DataFrame to CSV file")
        return event_all_cpu_total
